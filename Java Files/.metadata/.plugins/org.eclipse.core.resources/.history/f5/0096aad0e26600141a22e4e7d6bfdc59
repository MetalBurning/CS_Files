

public class TermIndexTable implements TermIndex {
	private Term values[];
	private String keys[];
	private int currentSize, maxSize;
	
	
	public TermIndexTable(int startSize) {
		values = new Term[startSize];	//sets the size
		keys = new String[startSize];
		currentSize = 0;
		maxSize = startSize;
	}
	
	@Override
	public void add(String filename, String newWord) {
		Term newTermObject = new Term(newWord.toLowerCase());
		newTermObject.incFrequency(filename);
		values[Math.abs(newWord.toLowerCase().hashCode())%maxSize];
		
		int hashedWord = hash(newWord);
        int i = hashedWord;
        int quadraticProb = 1;
        do
        {
            if (keys[i] == null)
            {
                keys[i] = key;
                vals[i] = val;
                currentSize++;
                return;
            }
            if (keys[i].equals(key)) 
            { 
                vals[i] = val; 
                return; 
            }            
            i = (i + h * h++) % maxSize;            
        } while (i != hashedWord);       
		
		
		
		
		// TODO Auto-generated method stub
		
	}
	private int hash(String word) {
        return word.hashCode() % maxSize;
    }  
	@Override
	public int size() {
       return currentSize;
    }

	@Override
	public void delete(String word) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public Term get(String word, Boolean printP) {
		int hashedWord = hash(word);
		int quadraticProb = 0;
        while (keys[hashedWord] != null) {
            if (keys[hashedWord].equals(word)) {
                return values[hashedWord];
            }
            hashedWord = (hashedWord + quadraticProb * quadraticProb++) % maxSize;// Increments quadraticProb after the math
        }            
        return null;
	}

}
